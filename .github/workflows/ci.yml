name: 'ci'

on:
  push:
    tags:
    branches:
      - "master"
      - "develop"
  pull_request:

env:
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CLANG_TIDY_VERSION: "14.0.0"
  EM_CACHE_FOLDER: "emsdk-cache"
  EM_VERSION: "3.1.24"

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      matrix:
        os:
          - ubuntu-22.04
        compiler:
          - llvm-14.0.0
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug

        include:
          #- compiler: gcc-12
          #  gcov_executable: gcov
          - compiler: llvm-14.0.0
            gcov_executable: "llvm-cov gcov"
          - run_cpplinter: On
            compiler: llvm-14.0.0
            os: ubuntu-22.04
            build_type: Debug

    steps:
      - uses: actions/checkout@v3

      - name: Setup cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: Setup cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          conan: true
          vcpkg: false
          ccache: true
          clangtidy: 14.0.0
          cppcheck: true
          gcovr: true
          opencppcoverage: true

      - name: Cleanup conan system packages
        run: |
          conan remove -f '*/system'

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build-native -S ${{github.workspace}} -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DDOXYGEN_ENABLED:BOOL=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON

      - name: Build
        run: |
          cmake --build ${{github.workspace}}/build-native --config ${{matrix.build_type}}

      - name: Test and coverage - Unix
        if: runner.os != 'Windows'
        working-directory: ${{github.workspace}}/build-native
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Test and coverage - Windows
        if: runner.os == 'Windows'
        working-directory: ${{github.workspace}}/build-native
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: Publish to codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ${{github.workspaces}}/build-native/coverage.xml

      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}

      - name: Configure CMake with emsdk
        run: |
          emcmake cmake -B ${{github.workspace}}/build-emsdk -S ${{github.workspace}} -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DDOXYGEN_ENABLED:BOOL=OFF -DTESTS_ENABLED:BOOL=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON

      - name: Run cpplinter
        if: matrix.run_cpplinter == 'On'
        uses: cpp-linter/cpp-linter-action@v2
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.CPPLINTER_PAT }}
        with:
          style: ''
          tidy-checks: ''
          version: '14'
          files-changed-only: true
          database: ${{github.workspace}}/build-emsdk
          file-annotations: true

      - name: Check linter results
        continue-on-error: true
        if: steps.linter.outputs.checks-failed > 0
        run: exit 1

      - name: Build with emsdk
        env:
          CC: ""
          CXX: ""
          CPATH: ""
          LIBRARY_PATH: ""
          CPPFLAGS: ""
          LDFLAGS: ""
          DYLD_LIBRARY_PATH: ""
          LD_LIBRARY_PATH: ""
        run: |
          cmake --build ${{github.workspace}}/build-emsdk --config ${{matrix.build_type}}
